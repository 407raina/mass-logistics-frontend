import React, { useState } from 'react';
import { Search, Calendar, ArrowLeft, Printer, FileText, DollarSign, CheckCircle, Clock, AlertCircle, Loader2 } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const InvByDate = () => {
  const [fromDate, setFromDate] = useState('');
  const [toDate, setToDate] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [invoices, setInvoices] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSearch = async () => {
    if (!fromDate || !toDate) {
      setError('Please select both dates');
      return;
    }
    if (new Date(fromDate) > new Date(toDate)) {
      setError('From date cannot be later than to date');
      return;
    }

    setError('');
    setIsLoading(true);
    setShowResults(false);
    try {
      console.log('Searching from:', fromDate, 'to:', toDate);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const mockInvoices = [
        { id: 'INV001', date: '2024-01-15', customer: 'ABC Company', amount: '$1,250.00', status: 'Paid' },
        { id: 'INV002', date: '2024-01-16', customer: 'XYZ Corp', amount: '$850.00', status: 'Pending' },
        { id: 'INV003', date: '2024-01-17', customer: 'Global Shipping Ltd', amount: '$2,100.00', status: 'Paid' },
        { id: 'INV004', date: '2024-01-18', customer: 'Emirates Freight', amount: '$975.00', status: 'Pending' },
        { id: 'INV005', date: '2024-01-19', customer: 'Dubai Cargo Services', amount: '$1,800.00', status: 'Paid' },
      ];
      
      setInvoices(mockInvoices);
      setShowResults(true);
    } catch (error) {
      console.error('Search failed:', error);
      setError('Search failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePrintInvoice = (invoiceId) => {
    console.log('Printing invoice:', invoiceId);
    window.print();
  };

  const handlePrintAll = () => {
    console.log('Printing all invoices');
    window.print();
  };

  const clearForm = () => {
    setFromDate('');
    setToDate('');
    setShowResults(false);
    setInvoices([]);
    setError('');
  };

  const getStatusIcon = (status) => {
    return status === 'Paid' ? 
      <CheckCircle size={16} className="text-green-600" /> : 
      <Clock size={16} className="text-yellow-600" />;
  };

  const getTotalAmount = () => {
    return invoices.reduce((sum, invoice) => {
      const amount = parseFloat(invoice.amount.replace('$', '').replace(',', ''));
      return sum + amount;
    }, 0).toFixed(2);
  };

  const getPaidCount = () => {
    return invoices.filter(invoice => invoice.status === 'Paid').length;
  };

  const getPendingCount = () => {
    return invoices.filter(invoice => invoice.status === 'Pending').length;
  };

  return (
    <div className="w-full bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 min-h-screen p-0 m-0 font-sans">
      {/* Enhanced Header */}
      <div className="bg-gradient-to-r from-blue-900 via-blue-800 to-indigo-900 text-white px-6 py-5 shadow-2xl border-b-4 border-blue-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-transparent"></div>
        <div className="flex items-center gap-4 max-w-7xl mx-auto relative z-10">
          <button 
            className="bg-white/10 backdrop-blur-md border border-white/20 text-white p-3 rounded-xl cursor-pointer flex items-center justify-center transition-all duration-300 w-12 h-12 hover:bg-white/20 hover:scale-105 active:scale-95 shadow-lg"
            onClick={() => navigate('/')}
          >
            <ArrowLeft size={20} />
          </button>
          <div className="flex items-center gap-4">
            <div className="bg-white/15 p-3 rounded-xl backdrop-blur-sm">
              <FileText size={28} className="text-blue-200" />
            </div>
            <div>
              <h1 className="m-0 text-white text-2xl font-bold tracking-wide">INVOICE SEARCH</h1>
            </div>
          </div>
        </div>
      </div>
      
      {/* Enhanced Search Section */}
      <div className="p-8 flex justify-center">
        <div className="bg-white/80 backdrop-blur-xl rounded-3xl p-10 shadow-2xl border border-white/50 max-w-4xl w-full relative overflow-hidden">
          {/* Decorative Elements */}
          <div className="absolute top-0 right-0 w-40 h-40 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-full -translate-y-20 translate-x-20 opacity-70"></div>
          <div className="absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-tr from-slate-100 to-blue-100 rounded-full translate-y-16 -translate-x-16 opacity-50"></div>
          
          {/* Card Header */}
          <div className="bg-gradient-to-r from-slate-700 via-slate-800 to-slate-900 text-white px-8 py-6 -mx-10 -mt-10 mb-10 rounded-t-3xl flex items-center gap-4 shadow-xl relative z-10">
            <div className="bg-white/20 p-3 rounded-xl backdrop-blur-sm">
              <Calendar className="text-white" size={24} />
            </div>
            <div>
              <h2 className="text-white text-xl font-bold m-0">Search by Date Range</h2>
            </div>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-8 bg-red-50 border border-red-200 rounded-2xl p-6 flex items-center gap-3 relative z-10">
              <AlertCircle className="text-red-600 flex-shrink-0" size={24} />
              <div>
                <h3 className="text-red-800 font-bold text-base">Error</h3>
                <p className="text-red-700 text-sm">{error}</p>
              </div>
            </div>
          )}
          
          {/* Search Form */}
          <div className="relative z-10">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
              <div className="flex flex-col gap-3">
                <label htmlFor="fromDate" className="text-slate-700 text-sm font-bold flex items-center gap-3">
                  <Calendar size={18} className="text-slate-500" />
                  From Date
                  <span className="text-red-500 font-bold">*</span>
                </label>
                <input
                  type="date"
                  id="fromDate"
                  value={fromDate}
                  onChange={(e) => {
                    setFromDate(e.target.value);
                    if (error) setError('');
                  }}
                  className="h-14 border-2 border-slate-200 rounded-2xl px-5 text-base bg-white/90 backdrop-blur-sm transition-all duration-300 text-slate-800 focus:outline-none focus:border-blue-500 focus:ring-4 focus:ring-blue-100 shadow-lg font-medium"
                  disabled={isLoading}
                />
              </div>
              
              <div className="flex flex-col gap-3">
                <label htmlFor="toDate" className="text-slate-700 text-sm font-bold flex items-center gap-3">
                  <Calendar size={18} className="text-slate-500" />
                  To Date
                  <span className="text-red-500 font-bold">*</span>
                </label>
                <input
                  type="date"
                  id="toDate"
                  value={toDate}
                  onChange={(e) => {
                    setToDate(e.target.value);
                    if (error) setError('');
                  }}
                  className="h-14 border-2 border-slate-200 rounded-2xl px-5 text-base bg-white/90 backdrop-blur-sm transition-all duration-300 text-slate-800 focus:outline-none focus:border-blue-500 focus:ring-4 focus:ring-blue-100 shadow-lg font-medium"
                  disabled={isLoading}
                />
              </div>
            </div>
            
            <div className="flex flex-wrap gap-4 justify-center pt-6">
              <button 
                className="bg-gradient-to-r from-blue-500 via-blue-600 to-indigo-600 text-white border-none rounded-2xl cursor-pointer flex items-center justify-center gap-3 text-base font-bold transition-all duration-300 px-10 py-4 h-14 min-w-32 hover:from-blue-600 hover:via-blue-700 hover:to-indigo-700 hover:shadow-xl hover:scale-105 disabled:opacity-60 disabled:cursor-not-allowed disabled:from-slate-400 disabled:to-slate-500 disabled:scale-100 active:scale-95 shadow-lg uppercase tracking-wide"
                onClick={handleSearch}
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 size={20} className="animate-spin" />
                    Searching...
                  </>
                ) : (
                  <>
                    <Search size={20} />
                    Search Invoices
                  </>
                )}
              </button>
              
              <button 
                className="bg-emerald-100 text-emerald-700 border-2 border-emerald-200 rounded-2xl cursor-pointer flex items-center justify-center gap-3 text-base font-bold transition-all duration-300 px-10 py-4 h-14 hover:bg-emerald-600 hover:text-white hover:border-emerald-600 hover:shadow-xl hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed active:scale-95 uppercase tracking-wide"
                onClick={handlePrintAll}
                disabled={isLoading || !showResults || invoices.length === 0}
              >
                <Printer size={20} />
                Print All
              </button>
              
              <button 
                className="bg-slate-100 text-slate-600 border-2 border-slate-200 rounded-2xl cursor-pointer flex items-center justify-center text-base font-bold transition-all duration-300 px-10 py-4 h-14 hover:bg-slate-200 hover:border-slate-300 hover:text-slate-700 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed active:scale-95 uppercase tracking-wide"
                onClick={clearForm}
                disabled={isLoading}
              >
                Clear Form
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Results Section */}
      {showResults && (
        <div className="px-8 pb-8 max-w-7xl mx-auto">
          {/* Stats Cards */}
          {invoices.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/50">
                <div className="flex items-center gap-4">
                  <div className="bg-blue-100 p-3 rounded-xl">
                    <FileText className="text-blue-600" size={24} />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-slate-800">{invoices.length}</h3>
                    <p className="text-slate-600 font-medium">Total Invoices</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/50">
                <div className="flex items-center gap-4">
                  <div className="bg-green-100 p-3 rounded-xl">
                    <CheckCircle className="text-green-600" size={24} />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-slate-800">{getPaidCount()}</h3>
                    <p className="text-slate-600 font-medium">Paid Invoices</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/50">
                <div className="flex items-center gap-4">
                  <div className="bg-yellow-100 p-3 rounded-xl">
                    <Clock className="text-yellow-600" size={24} />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-slate-800">{getPendingCount()}</h3>
                    <p className="text-slate-600 font-medium">Pending Invoices</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/50">
                <div className="flex items-center gap-4">
                  <div className="bg-emerald-100 p-3 rounded-xl">
                    <DollarSign className="text-emerald-600" size={24} />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-slate-800">${getTotalAmount()}</h3>
                    <p className="text-slate-600 font-medium">Total Amount</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div className="bg-white/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/50 overflow-hidden">
            {/* Results Header */}
            <div className="bg-gradient-to-r from-slate-700 via-slate-800 to-slate-900 text-white px-8 py-6 flex justify-between items-center">
              <div className="flex items-center gap-4">
                <div className="bg-white/20 p-3 rounded-xl backdrop-blur-sm">
                  <FileText size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-bold m-0">Invoice Search Results</h3>
                  <p className="text-slate-300 text-sm mt-1">Invoices from {fromDate} to {toDate}</p>
                </div>
              </div>
              <div className="bg-white/20 px-6 py-3 rounded-xl backdrop-blur-sm">
                <span className="text-base font-bold">
                  {invoices.length} invoice{invoices.length !== 1 ? 's' : ''} found
                </span>
              </div>
            </div>
            
            {invoices.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="w-full border-collapse min-w-[700px]">
                  <thead>
                    <tr className="bg-gradient-to-r from-slate-50 to-slate-100">
                      <th className="border-b-2 border-slate-300 py-4 px-6 text-left font-bold text-slate-700 uppercase tracking-wide text-sm">Invoice ID</th>
                      <th className="border-b-2 border-slate-300 py-4 px-6 text-left font-bold text-slate-700 uppercase tracking-wide text-sm">Date</th>
                      <th className="border-b-2 border-slate-300 py-4 px-6 text-left font-bold text-slate-700 uppercase tracking-wide text-sm">Customer</th>
                      <th className="border-b-2 border-slate-300 py-4 px-6 text-left font-bold text-slate-700 uppercase tracking-wide text-sm">Amount</th>
                      <th className="border-b-2 border-slate-300 py-4 px-6 text-left font-bold text-slate-700 uppercase tracking-wide text-sm">Status</th>
                      <th className="border-b-2 border-slate-300 py-4 px-6 text-center font-bold text-slate-700 uppercase tracking-wide text-sm">Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {invoices.map((invoice, index) => (
                      <tr key={invoice.id} className={`${index % 2 === 1 ? 'bg-slate-50/50' : 'bg-white'} hover:bg-blue-50 transition-all duration-200 border-b border-slate-200`}>
                        <td className="py-4 px-6 text-blue-600 font-bold text-sm">{invoice.id}</td>
                        <td className="py-4 px-6 text-slate-700 font-medium text-sm">{invoice.date}</td>
                        <td className="py-4 px-6 text-slate-700 font-medium text-sm">{invoice.customer}</td>
                        <td className="py-4 px-6 text-green-600 font-bold text-sm">{invoice.amount}</td>
                        <td className="py-4 px-6">
                          <span className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-xs font-bold border ${
                            invoice.status === 'Paid' 
                              ? 'bg-green-100 text-green-800 border-green-200' 
                              : 'bg-yellow-100 text-yellow-800 border-yellow-200'
                          } shadow-sm`}>
                            {getStatusIcon(invoice.status)}
                            {invoice.status}
                          </span>
                        </td>
                        <td className="py-4 px-6 text-center">
                          <button 
                            className="bg-gradient-to-r from-emerald-500 to-green-600 text-white border-none rounded-xl px-4 py-2 cursor-pointer text-xs font-bold transition-all duration-200 flex items-center gap-2 mx-auto hover:from-emerald-600 hover:to-green-700 hover:shadow-lg hover:scale-105 active:scale-95"
                            onClick={() => handlePrintInvoice(invoice.id)}
                          >
                            <Printer size={14} />
                            Print
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center py-20">
                <div className="inline-flex items-center justify-center w-20 h-20 bg-slate-100 rounded-full mb-6">
                  <AlertCircle className="text-slate-400" size={32} />
                </div>
                <h3 className="text-slate-600 text-xl font-bold mb-3">No Invoices Found</h3>
                <p className="text-slate-500 text-base max-w-md mx-auto leading-relaxed">
                  No invoices found for the selected date range. Please try different dates or check if invoices exist for this period.
                </p>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default InvByDate;
